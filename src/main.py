import time
import schedule
import logging
import os
import requests
from dotenv import load_dotenv
from utils.helpers import (
    load_last_saved_id,
    save_last_saved_id,
    load_random_news_from_s3
)
from utils.send_news_to_tg import send_to_telegram

load_dotenv()

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s %(levelname)s %(message)s')

NEWS_API_URL = os.getenv("NEWS_API_URL")


def check_news():
    logger.info("üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–æ–≤–∏–Ω —á–µ—Ä–µ–∑ API...")

    try:
        response = requests.get(f"{NEWS_API_URL}/latest")
        if response.status_code != 200:
            logger.warning(f"‚ö†Ô∏è API –ø–æ–º–∏–ª–∫–∞: {response.status_code}")
            return

        news = response.json()
        doc = news.get("document", {})
        news_id = doc.get("id")
        if not news_id:
            logger.warning("‚ö†Ô∏è –í—ñ–¥—Å—É—Ç–Ω—ñ–π ID –Ω–æ–≤–∏–Ω–∏.")
            return

        last_saved_id = load_last_saved_id()
        if news_id == last_saved_id:
            logger.info(
                "üü¢ –ù–æ–≤–∏—Ö –Ω–æ–≤–∏–Ω –Ω–µ–º–∞—î. –°–ø—Ä–æ–±–∞ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ –≤–∏–ø–∞–¥–∫–æ–≤—É –∑ –∞—Ä—Ö—ñ–≤—É.")
            archived_news = load_random_news_from_s3()
            if archived_news:
                send_to_telegram(archived_news)
            else:
                logger.debug(
                    "üì≠ –ê—Ä—Ö—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –Ω–æ–≤–∏–Ω—É.")
            return

        send_to_telegram(news)
        save_last_saved_id(news_id)

    except Exception as e:
        logger.error(f"‚ùå {e}")


schedule.every().hour.do(check_news)

if __name__ == "__main__":
    check_news()
    logger.info("üü¢ –°–µ—Ä–≤—ñ—Å –∑–∞–ø—É—â–µ–Ω–æ. –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞ —Ä–æ–∑–∫–ª–∞–¥–æ–º...")
    while True:
        schedule.run_pending()
        time.sleep(30)
